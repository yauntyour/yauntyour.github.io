<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FIO——提供基于posix thread 原理的异步FIO（AIO）</title>
    <url>/2022/03/27/FIO/</url>
    <content><![CDATA[<p>具备简单的集成性基础功能。</p>
<span id="more"></span>

<p>核心函数包括</p>
<ol>
<li>Asfio Asfio_create(const char *filepath,const char *mode) （创建一个AIO文件指针）</li>
<li>int Asfio_close(Asfio *asp, int mode) （等待所有异步操作执行完成后销毁Asfio *）</li>
<li>CALLBLACK_TH Asfio_readall(Asfio *asp) （异步读取整个文件的内容）</li>
<li>size_t Asfio_callblack(CALLBLACK_TH th,bytes *buf) （回调获取异步读取的内容）</li>
<li>int Asfio_write(Asfio *asp, const void *Element) （异步写入）</li>
<li>size_t Asfio_readcall(Asfio *asp, bytes *buf)（同步读取）</li>
</ol>
<p>其他相关依赖</p>
<ul>
<li>pthread.h 提供多线程支持</li>
<li>bytes.h 提供byter的操作</li>
</ul>
<p>相关信息</p>
<ul>
<li>可以利用以下函数实现UNIX下的FIFO通信（此处不提供支持）</li>
<li><ul>
<li>FILE *fdopen(int fd, const char *mode); </li>
<li>int fileno(FILE *stream);</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>redstone爬虫框架发行说明</title>
    <url>/2020/08/21/Python%E8%87%AA%E7%A0%94%E7%88%AC%E8%99%AB%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>具备简单的集成性基础功能。</p>
<span id="more"></span>

<p>包含以下内容:</p>
<p><em>1、使用帮助文档</em></p>
<p><em>2、发行说明</em></p>
<p><em>3、相关信息</em></p>
<h2 id="1、使用帮助文档"><a href="#1、使用帮助文档" class="headerlink" title="1、使用帮助文档"></a>1、使用帮助文档</h2><p>该框架支持以下操作：</p>
<p>注：POST,GET支持最小化内存消耗，so，直接加设多线程效率更高</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#POST请求</span></span><br><span class="line">post(url=url,mode=mode,json=json,FilePath=FilePath)</span><br><span class="line"><span class="comment">#GET请求</span></span><br><span class="line">get(url=self.url,mode=self.mode)</span><br><span class="line"><span class="comment">#向网站获取Cookie</span></span><br><span class="line">cookies(url)</span><br><span class="line"><span class="comment">#从Cookie池中获取</span></span><br><span class="line">cookie()</span><br><span class="line"><span class="comment">#简易代理池</span></span><br><span class="line">IP()</span><br><span class="line">IP_make()</span><br><span class="line"><span class="comment">#其他事项可通过翻看源码了解</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="2、发行说明"><a href="#2、发行说明" class="headerlink" title="2、发行说明"></a>2、发行说明</h2><p>对于懒的小伙伴可以Ctrl+C&#x2F;V，这是一个相对比较完善的封装</p>
<h2 id="3、相关信息"><a href="#3、相关信息" class="headerlink" title="3、相关信息"></a>3、相关信息</h2><p>开发环境为 Python 3.8.2</p>
<p>外部扩展库依赖：random，re，request，urllib，http，os，time，tqdm，chardet，threading</p>
<p>作者：yauntyour</p>
<p>Github：<a href="https://github.com/yauntyour/redston">https://github.com/yauntyour/redston</a></p>
]]></content>
  </entry>
  <entry>
    <title>MnP ——A high speed web service</title>
    <url>/2022/03/27/MnP-Server/</url>
    <content><![CDATA[<p>具备简单的集成性基础功能。</p>
<h2 id="About-What"><a href="#About-What" class="headerlink" title="About What"></a>About What</h2><p>We use the <strong>libevent</strong> to making our <strong>MnP</strong>. That’s so good——because the <strong>libevent</strong> it’s one has industrial stability socket library (though it occupies a very big memory,but it also has a very high speed).</p>
<span id="more"></span>

<p>In this time,this project didn’t done. But my idea is this project has a industrial stability the same as <strong>libevent</strong>, and it has a more portability. So it can has a relatively compact memory size and a high runing speed.</p>
<p>Above it’s my project’s summary in initial stage.<br><img src="https://github.com/yauntyour/MnP/blob/master/doc/MnP.png" alt="image"></p>
<h2 id="Codes-root-folder"><a href="#Codes-root-folder" class="headerlink" title="Codes root folder"></a>Codes root folder</h2><p>​	<a hear="https://github.com/yauntyour/MnP/blob/master/codes/readme.md">Codes root folder Markdown</a></p>
]]></content>
  </entry>
  <entry>
    <title>appweb (v1.0)</title>
    <url>/2022/07/10/appweb-1.0-updata/</url>
    <content><![CDATA[<p>具备简单的集成性基础功能。</p>
<span id="more"></span>
<p>模块架构：</p>
<ul>
<li>acc（接受请求）</li>
<li>rsc（响应+调度器实现）</li>
<li>res（已独立为全新的结构）</li>
<li>com（中心封装和集成）</li>
</ul>
<p>全部二次封装&amp;集成&amp;C++ class封装于<code>appweb.h</code>。</p>
<h2 id="详细内容"><a href="#详细内容" class="headerlink" title="详细内容"></a>详细内容</h2><h3 id="example-dome："><a href="#example-dome：" class="headerlink" title="example dome："></a>example dome：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;appweb.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">FUNC_CB_C(func)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *html = <span class="string">&quot;HTTP/1.1 200 OK \r\n\r\n&lt;h1&gt;Hello,World&lt;/h1&gt;\r\n \0\0\0&quot;</span>;</span><br><span class="line">    send((*request).addr.socket, html, <span class="built_in">strlen</span>(html), <span class="number">0</span>);</span><br><span class="line">    close_socket((*request).addr.socket);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //等价的C代码</span></span><br><span class="line"><span class="comment">    WS_Init();</span></span><br><span class="line"><span class="comment">    appev_t ev;</span></span><br><span class="line"><span class="comment">    ev.port = 10000;</span></span><br><span class="line"><span class="comment">    ev.UTCoffset = 8;</span></span><br><span class="line"><span class="comment">    app_event_init(&amp;ev);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    appweb <span class="title function_">app</span><span class="params">(<span class="number">8</span>, <span class="number">10000</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">urlc_t</span> urlc[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;/home&quot;</span>, func, Type_GET&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">   	</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    app_on(&amp;ev, urlc, 1);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    pthread_t acc, rsc;</span></span><br><span class="line"><span class="comment">    app_acc(&amp;acc, &amp;ev);</span></span><br><span class="line"><span class="comment">    app_rsc(&amp;rsc, &amp;ev);</span></span><br><span class="line"><span class="comment">    pthread_join(acc, NULL);</span></span><br><span class="line"><span class="comment">    pthread_join(rsc, NULL);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    app_event_free(&amp;ev);</span></span><br><span class="line"><span class="comment">    WS_clean();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	app.on(urlc,<span class="number">1</span>);</span><br><span class="line">    app.start(flag_wait);</span><br><span class="line">    delete &amp;app;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><ol>
<li><p>注册一个urlc_t的注册函数。结构为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">necessary arg:</span></span><br><span class="line"><span class="comment"> char* url -URL path with on();</span></span><br><span class="line"><span class="comment"> func_cb _func_ -deal by function;</span></span><br><span class="line"><span class="comment"> int req_model,</span></span><br><span class="line"><span class="comment">     rsp_code;</span></span><br><span class="line"><span class="comment">if req_model == -1,</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">urlc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> *url;<span class="comment">//受注册的URL</span></span><br><span class="line">    func_cb _func_;<span class="comment">//处理函数</span></span><br><span class="line">    <span class="type">int</span> req_model;<span class="comment">//注册函数的响应类型</span></span><br><span class="line">&#125; <span class="type">urlc_t</span>;</span><br><span class="line"><span class="comment">//函数类型为：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*func_cb)</span><span class="params">(<span class="type">req_t</span> *)</span>;</span><br><span class="line"><span class="comment">//理论上根据规范，您需要返回一个HTTP状态码检查函数执行，因为在调度器中不会检查函数的执行是否正常，这就要您在编写函数时调试完成。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>app.start(flag_wait);</code>执行服务。执行端会监听您提供的port。flag设置为0表示默认阻塞运行。</p>
</li>
</ol>
<h3 id="相关基础信息："><a href="#相关基础信息：" class="headerlink" title="相关基础信息："></a>相关基础信息：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">appev_t</span></span><br><span class="line">&#123;</span><br><span class="line">    IPv4_addr_t tcpip, udpip;<span class="comment">//保存了服务器的两个socket和服务器地址</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> port;<span class="comment">//端口号</span></span><br><span class="line">    <span class="type">req_t</span> acc_list[MAX_CONN];<span class="comment">//默认的最大连接数，需要初始化。可以修改MAX_CONN改变默认最大连接数</span></span><br><span class="line">    <span class="type">size_t</span> line_length;<span class="comment">//注册函数列表的长度</span></span><br><span class="line">    <span class="type">urlc_t</span> *line;<span class="comment">//注册函数列表</span></span><br><span class="line">    <span class="type">int</span> UTCoffset;<span class="comment">//执行端所在地区的UTC偏移量，默认为0。</span></span><br><span class="line">&#125; <span class="type">appev_t</span>;</span><br><span class="line"><span class="comment">//利用该宏可以快速定义一个标准函数（参见example dome）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNC_CB_C(__name__) int __name__(req_t *request)</span></span><br></pre></td></tr></table></figure>

<h3 id="SDK-amp-Debug-amp-Python实现的调试工具"><a href="#SDK-amp-Debug-amp-Python实现的调试工具" class="headerlink" title="SDK&amp;Debug&amp;Python实现的调试工具"></a>SDK&amp;Debug&amp;Python实现的调试工具</h3><ol>
<li><p>nc.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-nc&#x27;</span>:</span><br><span class="line">    netcat()</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-cli&#x27;</span>:</span><br><span class="line">    UDPclientSend()</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-server&#x27;</span>:</span><br><span class="line">    Server()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no this mode&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;argv format: -mode host port recvbufflen/data (Server socketTypes:STREAM/DGRAM)&quot;</span>)</span><br><span class="line"><span class="comment">##argv format: -mode host port recvbufflen/data (Server socketTypes:STREAM/DGRAM)</span></span><br><span class="line"><span class="comment">#eg :python nc.py -cli 127.0.0.1 10000 1280 STREAM</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>netools.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以自行修改msg的内容</span></span><br><span class="line">msg = <span class="string">&quot;GET /home HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2\r\n\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\r\nAccept-Language: zh-cn,zh;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nReferer: http://localhost/\r\nContent-Length: 25\r\nContent-Type: application/x-www-form-urlencoded\r\nusername=aa&amp;password=1234&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-nc&#x27;</span>:</span><br><span class="line">    netcat()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;argv format: -mode host port recvbufflen&quot;</span>)</span><br><span class="line"><span class="comment">#argv format: -mode host port recvbufflen</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>netcat 自行到官网下载最新版本</p>
<p><a href="https://eternallybored.org/misc/netcat/">netcat 1.11 for Win32&#x2F;Win64 (eternallybored.org)</a></p>
</li>
</ol>
<h1 id="后续更新信息"><a href="#后续更新信息" class="headerlink" title="后续更新信息"></a>后续更新信息</h1><ol>
<li>加入zlib支持gzip压缩</li>
<li>加入升级版res，资源池</li>
</ol>
<h3 id="Made-by-yauntyour-Copyright-reserved"><a href="#Made-by-yauntyour-Copyright-reserved" class="headerlink" title="Made by yauntyour Copyright reserved."></a>Made by yauntyour Copyright reserved.</h3><h3 id="e-mail-x79-x61-x75-x6e-x74-121-x6f-x75-x72-64-x6f-x75-x74-108-111-111-x6b-46-x63-x6f-x6d"><a href="#e-mail-x79-x61-x75-x6e-x74-121-x6f-x75-x72-64-x6f-x75-x74-108-111-111-x6b-46-x63-x6f-x6d" class="headerlink" title="e-mail:&#x79;&#x61;&#x75;&#x6e;&#x74;&#121;&#x6f;&#x75;&#x72;&#64;&#x6f;&#x75;&#x74;&#108;&#111;&#111;&#x6b;&#46;&#x63;&#x6f;&#x6d;"></a>e-mail:<a href="mailto:&#x79;&#x61;&#x75;&#x6e;&#x74;&#121;&#x6f;&#x75;&#x72;&#64;&#x6f;&#x75;&#x74;&#108;&#111;&#111;&#x6b;&#46;&#x63;&#x6f;&#x6d;">&#x79;&#x61;&#x75;&#x6e;&#x74;&#121;&#x6f;&#x75;&#x72;&#64;&#x6f;&#x75;&#x74;&#108;&#111;&#111;&#x6b;&#46;&#x63;&#x6f;&#x6d;</a></h3><h3 id="Copyright-see-the-file-LICENSE"><a href="#Copyright-see-the-file-LICENSE" class="headerlink" title="Copyright  see the file LICENSE."></a>Copyright  see the file LICENSE.</h3>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>COROUTINE(协程)</title>
    <url>/2022/02/08/coroutine/</url>
    <content><![CDATA[<p>异步的操作一般用于IO操作的等待与执行，比如</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* codes */</span></span><br><span class="line">fread(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream);</span><br><span class="line"><span class="comment">/* codes */</span></span><br></pre></td></tr></table></figure>

<p>等待读取会占用大量的时间，so，我们很容易想到利用多线程来实现并发甚至是并行操作。</p>
<p>但是这时我们不得不面临一个问题：线程的切换和唤醒操作将同样占用不菲的处理资源开销。</p>
<p>那么有没有一种<u>单线程的异步操作</u>呢？有，这时我们想到了著名的单线程异步操作——JavaScript；</p>
<p>众所周知，JS是单线程的，而且是支持异步操作的。</p>
<p>所以我们引入JS的 “协程操作”；</p>
<p><img src="https://pic1.zhimg.com/v2-6e24040bcefef3325dd2493f99013257_1440w.jpg?source=172ae18b" alt="什么是协程？——来源于知乎"></p>
<p>所以理论上，我们需求的利用多核的协程是很不现实的。因为这期间核与核之间的操作是相对独立的。</p>
<p>而且睡眠只能停止上下文的交换，不能停止流水的执行。</p>
<p>所以我们还是来研究一下单核的异步操作吧。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*control with coroutine*/</span></span><br><span class="line">C:</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> A;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*create the codes with close spare*/</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)&#123;</span><br><span class="line">A:</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">goto</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">B:</span><br><span class="line">    <span class="keyword">while</span> (i != <span class="number">0</span> &amp;&amp; i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i -= <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">goto</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// CONTROL(C);</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显而易见，我们可以利用<code>goto</code>语句来实现跳转的过程，期间我们把代码封装成代码块（code block），但是这个编写的过程我们可以加宏以优化</p>
<p>coroutine.h：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __COROUTINE__H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __COROUTINE__H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFCODE(__name__,__expression__,codes...) <span class="keyword">if</span>(0)&#123;__name__:<span class="keyword">if</span>(__expression__)&#123;codes&#125;&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONTROL(codes...) __CONTROL__: codes;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> function(func_name,end_goto,__expression__,codes...) <span class="keyword">if</span>(0)&#123;func_name:<span class="keyword">if</span>(__expression__)&#123;codes&#125;goto end_goto;&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> used(func_name,end_goto) goto func_name;end_goto:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">//!__COROUTINE__H__</span></span></span><br></pre></td></tr></table></figure>

<p>现在上面的代码可以改写成：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;coroutine.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*control with coroutine*/</span></span><br><span class="line">    CONTROL(&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">goto</span> B;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">goto</span> A;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/*create the codes with close spare*/</span></span><br><span class="line">    DEFCODE(A, <span class="number">1</span>, &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">            <span class="keyword">goto</span> __CONTROL__;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    DEFCODE(B, <span class="number">1</span>, &#123;</span><br><span class="line">        <span class="keyword">while</span> (i != <span class="number">0</span> &amp;&amp; i &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">            <span class="keyword">goto</span> __CONTROL__;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/*a example with test code block*/</span></span><br><span class="line">    function(test,test_end, <span class="number">1</span>, &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;test.\n&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    used(test,test_end);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>显然大大提高了效率。而且加入了<code>CONTROL()</code>控制函数，可以在这里添加用于控制的代码块。</p>
<p>跳转至  <code>__CONTROL__</code>代码块就是控制函数所在；</p>
<p>这种方式可以显示地避免杂七杂八的函数命名方式，实现了复用和优化。</p>
<blockquote>
<p><em>在一个函数中，有且只有一个 <code>__CONTROL__</code>多了会打架，不过可以安排</em>。</p>
</blockquote>
<p>可以利用<code>function()</code>函数来定义一个可以带有返回的代码块，并用<code>used()</code>来调用</p>
]]></content>
  </entry>
  <entry>
    <title>appweb (v2.0)</title>
    <url>/2022/07/10/appweb-2.0-updata/</url>
    <content><![CDATA[<p>具备简单的集成性基础功能。</p>
<span id="more"></span>
<p>模块架构：</p>
<ul>
<li>acc（接受请求）</li>
<li>rsc（响应+调度器实现）</li>
<li>RESRC（资源池）<a href="https://github.com/yauntyour/RESRC">https://github.com/yauntyour/RESRC</a></li>
<li>com（中心封装和集成）</li>
</ul>
<p>全部二次封装&amp;集成&amp;C++ class封装于<code>appweb.h</code>。</p>
<h2 id="详细内容"><a href="#详细内容" class="headerlink" title="详细内容"></a>详细内容</h2><h3 id="example-dome："><a href="#example-dome：" class="headerlink" title="example dome："></a>example dome：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;appweb.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> RESRC res;</span><br><span class="line"></span><br><span class="line">FUNC_CB_C(api)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *html = <span class="string">&quot;HTTP/1.1 200 OK \r\n\r\n&#123;&#x27;test&#x27;:&#x27;Hello,World&#x27;&#125;\r\n \0\0\0&quot;</span>;</span><br><span class="line">    send((*request).addr.socket, html, <span class="built_in">strlen</span>(html), <span class="number">0</span>);</span><br><span class="line">    close_socket((*request).addr.socket);</span><br><span class="line">&#125;;</span><br><span class="line">FUNC_CB_C(login)</span><br><span class="line">&#123;</span><br><span class="line">    RESRC_FILE *p = RESRC_select_path(&amp;res, <span class="string">&quot;K:\\CCXXProgram\\appweb\\out\\data.html&quot;</span>);</span><br><span class="line">    send((*request).addr.socket, p-&gt;data.data, p-&gt;data.length, <span class="number">0</span>);</span><br><span class="line">    close_socket((*request).addr.socket);</span><br><span class="line">&#125;;</span><br><span class="line">FUNC_CB_C(test)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *html = <span class="string">&quot;HTTP/1.1 200 OK \r\n\r\n&lt;h1 style=&#x27;text-align:center;&#x27;&gt;Hello,World&lt;/h1&gt;\r\n \0\0\0&quot;</span>;</span><br><span class="line">    send((*request).addr.socket, html, <span class="built_in">strlen</span>(html), <span class="number">0</span>);</span><br><span class="line">    close_socket((*request).addr.socket);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    RESRC_create(&amp;res, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    RESRC_FILE_OPEN(&amp;(res.uuid_seed), &amp;(res.filelist[<span class="number">0</span>]), <span class="string">&quot;K:\\CCXXProgram\\appweb\\out\\data.html&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    RESRC_FILE_cache(<span class="number">10</span>, &amp;(res.filelist[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    WS_Init();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    appev_t ev;</span></span><br><span class="line"><span class="comment">    ev.port = 10000;</span></span><br><span class="line"><span class="comment">    ev.UTCoffset = 8;</span></span><br><span class="line"><span class="comment">    ev.root_dict.func = test;</span></span><br><span class="line"><span class="comment">    app_event_init(&amp;ev, 128);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    appweb <span class="title function_">app</span><span class="params">(<span class="number">8</span>, <span class="number">10000</span>, <span class="number">2</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Varde home_dict = Varde_def(test, Type_GET, &quot;home&quot;, ComPath_True);</span></span><br><span class="line"><span class="comment">    Varde home_list[] = &#123;</span></span><br><span class="line"><span class="comment">        Varde_def(login, Type_GET, &quot;login&quot;, ComPath_True),</span></span><br><span class="line"><span class="comment">        Varde_def(api, Type_POST, &quot;api&quot;, ComPath_True),</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    Varde_list_append(&amp;(ev.root_dict), &amp;home_dict);</span></span><br><span class="line"><span class="comment">    Varde_ZIP(&amp;(ev.root_dict));</span></span><br><span class="line"><span class="comment">    Varde_ZIP(&amp;home_dict);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    app.set_root_dict_func(test, Type_ALL);</span><br><span class="line"></span><br><span class="line">    Varde home_list[] = &#123;</span><br><span class="line">        Varde_def(login, Type_GET, <span class="string">&quot;postTest&quot;</span>, ComPath_True),</span><br><span class="line">        Varde_def(api, Type_POST, <span class="string">&quot;api&quot;</span>, ComPath_True),</span><br><span class="line">    &#125;;</span><br><span class="line">    Varde home_dict = &#123;test, Type_GET, <span class="string">&quot;home&quot;</span>, home_list, <span class="number">2</span>, <span class="number">2</span>, ComPath_True&#125;;</span><br><span class="line">    home_dict.ZIP();</span><br><span class="line"></span><br><span class="line">    app.root_dict_p-&gt;append(&amp;home_dict);</span><br><span class="line">    app.root_dict_p-&gt;ZIP();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     pthread_t acc_th;</span></span><br><span class="line"><span class="comment">     app_acc(&amp;acc_th, &amp;ev);</span></span><br><span class="line"><span class="comment">     pthread_t rsc_th;</span></span><br><span class="line"><span class="comment">     app_rsc(&amp;rsc_th, &amp;ev);</span></span><br><span class="line"><span class="comment">     pthread_join(rsc_th, NULL);</span></span><br><span class="line"><span class="comment">     pthread_join(acc_th, NULL);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    app.start(flag_wait);</span><br><span class="line"></span><br><span class="line">    WS_clean();</span><br><span class="line">    RESRC_FILE_CLOSE(&amp;(res.filelist[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p> Varde 的基本原理和结构————树级目录<br><a href="https://postimg.cc/ykRJtZ5G"><img src="https://i.postimg.cc/X7HwZKgn/IMG-20220827-123138.jpg" alt="IMG-20220827-123138.jpg"></a></p>
<ol>
<li><p>注册一个Varde，其结构为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">     necessary arg:</span></span><br><span class="line"><span class="comment">         char* Name -A node&#x27;s Name;</span></span><br><span class="line"><span class="comment">         func_cb func -A deal by function;</span></span><br><span class="line"><span class="comment">         int req_Type -request model;</span></span><br><span class="line"><span class="comment">         struct varde *list -A node list this node;</span></span><br><span class="line"><span class="comment">         size_t list_length, list_size -The list&#x27;s length &amp; size;</span></span><br><span class="line"><span class="comment">         int ComPath -Common path resolution:true or false;</span></span><br><span class="line"><span class="comment">     if req_model == -1,it will disable this Varde;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">varde</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">     func_cb func;</span><br><span class="line">     <span class="type">int</span> req_Type;</span><br><span class="line">     <span class="type">char</span> *Name; <span class="comment">// The Name of varde</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">varde</span> *<span class="title">list</span>;</span></span><br><span class="line">     <span class="type">size_t</span> list_length, list_size;</span><br><span class="line">     <span class="type">int</span> ComPath; <span class="comment">// Common path resolution:true or false</span></span><br><span class="line"> <span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">     <span class="type">int</span> <span class="title function_">append</span><span class="params">(<span class="keyword">struct</span> varde *Var)</span>;</span><br><span class="line">     <span class="type">int</span> <span class="title function_">ZIP</span><span class="params">()</span></span><br><span class="line"> <span class="meta">#<span class="keyword">endif</span> <span class="comment">//__cplusplus</span></span></span><br><span class="line"> &#125; Varde;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数类型为：</span></span><br><span class="line"><span class="comment">//利用该宏可以快速定义一个标准函数（参见example dome）</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> FUNC_CB_C(__name__) int __name__(req_t *request)</span></span><br><span class="line"><span class="comment">//理论上根据规范，您需要返回一个HTTP状态码检查函数执行，因为在调度器中不会检查函数的执行是否正常，这就要您在编写函数时调试完成。</span></span><br></pre></td></tr></table></figure>
<p> 我们提供一个快捷注册的宏</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Varde_def(func, req_Type, Name, ComPath)  \</span></span><br><span class="line"><span class="meta">    &#123;                                             \</span></span><br><span class="line"><span class="meta">        func, req_Type, Name, NULL, 0, 0, ComPath \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="comment">//eg: Varde var = Varde_def(test,req_ALL,&quot;test&quot;,ComPath_True);</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>app.start(flag_wait);</code>执行服务。执行端会监听您提供的port。flag设置为0表示默认阻塞运行。</p>
</li>
</ol>
<h3 id="相关基础信息："><a href="#相关基础信息：" class="headerlink" title="相关基础信息："></a>相关基础信息：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">appev</span></span><br><span class="line">&#123;</span><br><span class="line">    IPv4_addr_t tcpip, udpip;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> port;</span><br><span class="line">    Varde root_dict;</span><br><span class="line">    <span class="type">req_t</span> *Thread_queue;</span><br><span class="line">    <span class="type">size_t</span> Thread_queue_length;</span><br><span class="line">    <span class="type">int</span> UTCoffset;</span><br><span class="line">&#125; <span class="type">appev_t</span>;</span><br></pre></td></tr></table></figure>

<h3 id="SDK-amp-Debug-amp-Python实现的调试工具"><a href="#SDK-amp-Debug-amp-Python实现的调试工具" class="headerlink" title="SDK&amp;Debug&amp;Python实现的调试工具"></a>SDK&amp;Debug&amp;Python实现的调试工具</h3><ol>
<li><p>nc.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-nc&#x27;</span>:</span><br><span class="line">    netcat()</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-cli&#x27;</span>:</span><br><span class="line">    UDPclientSend()</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-server&#x27;</span>:</span><br><span class="line">    Server()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no this mode&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;argv format: -mode host port recvbufflen/data (Server socketTypes:STREAM/DGRAM)&quot;</span>)</span><br><span class="line"><span class="comment">##argv format: -mode host port recvbufflen/data (Server socketTypes:STREAM/DGRAM)</span></span><br><span class="line"><span class="comment">#eg :python nc.py -cli 127.0.0.1 10000 1280 STREAM</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>netools.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以自行修改msg的内容</span></span><br><span class="line">msg = <span class="string">&quot;GET /home HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2\r\n\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\r\nAccept-Language: zh-cn,zh;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nReferer: http://localhost/\r\nContent-Length: 25\r\nContent-Type: application/x-www-form-urlencoded\r\nusername=aa&amp;password=1234&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-nc&#x27;</span>:</span><br><span class="line">    netcat()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;argv format: -mode host port recvbufflen&quot;</span>)</span><br><span class="line"><span class="comment">#argv format: -mode host port recvbufflen</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>netcat 自行到官网下载最新版本</p>
<p><a href="https://eternallybored.org/misc/netcat/">netcat 1.11 for Win32&#x2F;Win64 (eternallybored.org)</a></p>
</li>
</ol>
<h1 id="后续更新信息"><a href="#后续更新信息" class="headerlink" title="后续更新信息"></a>后续更新信息</h1><ol>
<li>加入zlib支持gzip压缩</li>
<li>改进RESRC资源池设计</li>
<li>支持HTTP2-3</li>
<li>UDP接口开放</li>
</ol>
<h3 id="Made-by-yauntyour-Copyright-reserved"><a href="#Made-by-yauntyour-Copyright-reserved" class="headerlink" title="Made by yauntyour Copyright reserved."></a>Made by yauntyour Copyright reserved.</h3><h3 id="e-mail-121-97-117-110-x74-x79-111-117-x72-64-x6f-117-116-x6c-111-x6f-x6b-x2e-99-x6f-x6d"><a href="#e-mail-121-97-117-110-x74-x79-111-117-x72-64-x6f-117-116-x6c-111-x6f-x6b-x2e-99-x6f-x6d" class="headerlink" title="e-mail:&#121;&#97;&#117;&#110;&#x74;&#x79;&#111;&#117;&#x72;&#64;&#x6f;&#117;&#116;&#x6c;&#111;&#x6f;&#x6b;&#x2e;&#99;&#x6f;&#x6d;"></a>e-mail:<a href="mailto:&#121;&#97;&#117;&#110;&#x74;&#x79;&#111;&#117;&#x72;&#64;&#x6f;&#117;&#116;&#x6c;&#111;&#x6f;&#x6b;&#x2e;&#99;&#x6f;&#x6d;">&#121;&#97;&#117;&#110;&#x74;&#x79;&#111;&#117;&#x72;&#64;&#x6f;&#117;&#116;&#x6c;&#111;&#x6f;&#x6b;&#x2e;&#99;&#x6f;&#x6d;</a></h3><h3 id="Copyright-see-the-file-LICENSE"><a href="#Copyright-see-the-file-LICENSE" class="headerlink" title="Copyright  see the file LICENSE."></a>Copyright  see the file LICENSE.</h3>]]></content>
  </entry>
  <entry>
    <title>dataset with C/C++</title>
    <url>/2022/03/27/dataset/</url>
    <content><![CDATA[<p>A dynamic array  with C&#x2F;C++. Only used <code>calloc()</code> with <code>&lt;stdlib.h&gt;</code></p>
<span id="more"></span>
<p>关于动态数组的概念就不多赘述了，dataset有一套完整的数据创建和效验，</p>
<p>您可以使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __dataset_null__ ((__Var__ *)0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __dataset_end__ ((__Var__ *)-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __dataset_endVar__ ((__Var__ *)-2)</span></span><br></pre></td></tr></table></figure>

<p>这三个宏来判断您的dataset是否合法。</p>
<p>除此之外，dataset本身不提供free的操作，我希望把操作权交给开发者；</p>
<p>因为free()的释放会影响迭代器的工作，这是由于free()并没有把头部设置为<code>__dataset_end__</code>，</p>
<p>所以我们建议您手动释放的同时自行设置头部，这边建议直接使用<code>reset_size()</code>重置dataset的大小。</p>
<p>这是相关的使用例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dataset.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    dataset <span class="built_in">set</span> = dataset_create(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">/*for each and set data*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">set</span>[i].data = &amp;i;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>[i].point == __dataset_end__)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>[i].point == __dataset_endVar__)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">set</span>[i].point = __dataset_null__;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for each and out*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i, *((<span class="type">int</span> *)<span class="built_in">set</span>[i].data));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>[i].point == __dataset_end__ || <span class="built_in">set</span>[i].point == __dataset_endVar__)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size:%d\n&quot;</span>, dataset_sizeof(&amp;<span class="built_in">set</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length:%d\n\n&quot;</span>, dataset_length(&amp;<span class="built_in">set</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*addend n* elements*/</span></span><br><span class="line">    __Var__ v;</span><br><span class="line">    v.data = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">    dataset_addendn(&amp;<span class="built_in">set</span>, <span class="number">3</span>, &amp;v, &amp;v, &amp;v);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size:%d\n&quot;</span>, dataset_sizeof(&amp;<span class="built_in">set</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length:%d\n\n&quot;</span>, dataset_length(&amp;<span class="built_in">set</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*reset the size of dataset*/</span></span><br><span class="line">    dataset_reset_size(&amp;<span class="built_in">set</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i, *((<span class="type">int</span> *)<span class="built_in">set</span>[i].data));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>[i].point == __dataset_end__ || <span class="built_in">set</span>[i].point == __dataset_endVar__)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size:%d\n&quot;</span>, dataset_sizeof(&amp;<span class="built_in">set</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length:%d\n\n&quot;</span>, dataset_length(&amp;<span class="built_in">set</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*dataset cating for two set with one by one*/</span></span><br><span class="line">    dataset buf = dataset_create(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i].data = &amp;i;</span><br><span class="line">        <span class="keyword">if</span> (buf[i].point == __dataset_end__)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buf[i].point == __dataset_endVar__)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i].point = __dataset_null__;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dataset_cat(&amp;<span class="built_in">set</span>, &amp;buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size:%d\n&quot;</span>, dataset_sizeof(&amp;<span class="built_in">set</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length:%d\n&quot;</span>, dataset_length(&amp;<span class="built_in">set</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i, *((<span class="type">int</span> *)<span class="built_in">set</span>[i].data));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>[i].point == __dataset_end__ || <span class="built_in">set</span>[i].point == __dataset_endVar__)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Did you want to free the dataset?</span></span><br><span class="line"><span class="comment">    oh,it&#x27;s nothing.</span></span><br><span class="line"><span class="comment">    Then you didn&#x27;t worry about the memory.</span></span><br><span class="line"><span class="comment">    It such as a array,but it&#x27;s a dynamic array.</span></span><br><span class="line"><span class="comment">    Just like a variable.</span></span><br><span class="line"><span class="comment">    In the codes,I am just used calloc() to make memory spare.</span></span><br><span class="line"><span class="comment">    Nothing to free.</span></span><br><span class="line"><span class="comment">    But,sometimes as you like what to do.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="授权许可"><a href="#授权许可" class="headerlink" title="授权许可"></a>授权许可</h1><p>100%完全开源，您可以自由使用此设计。用途由您自行决定。</p>
<p><strong>请保留作者出处</strong></p>
<p>This library was made by <a href="https://github.com/yauntyour/">yauntyour</a>.</p>
]]></content>
  </entry>
</search>
